╔═══════════════════════════════════════════════════════════════════════════╗
║                                                                           ║
║        🚀 YSH B2B DEPLOYMENT - CHECKLIST FINAL DE EXECUÇÃO 🚀             ║
║                                                                           ║
║                         Status: 95% → 100%                                ║
║                         Tempo: 19 minutos                                 ║
║                                                                           ║
╚═══════════════════════════════════════════════════════════════════════════╝


═══════════════════════════════════════════════════════════════════════════
  PARTE 1: MANUAL (4 MINUTOS) - VOCÊ FAZ AGORA
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ ⏸️  TASK 1: CRIAR DATABASE VIA AWS CONSOLE                              │
└─────────────────────────────────────────────────────────────────────────┘

  [ ] 1. Abrir AWS Console EC2
        → https://us-east-1.console.aws.amazon.com/ec2/

  [ ] 2. Instances → Selecionar: i-0a8874f3890bb28c3

  [ ] 3. Botão "Connect" (laranja topo direito)

  [ ] 4. Aba "Session Manager" → Botão "Connect"

  [ ] 5. COPIAR/COLAR comando 1 (instalar PostgreSQL):
        ┌───────────────────────────────────────────────────────────────┐
        │ sudo dnf install -y postgresql15                              │
        └───────────────────────────────────────────────────────────────┘
        ⏱️  Aguardar instalação (~2 min)

  [ ] 6. COPIAR/COLAR comando 2 (criar database):
        ┌───────────────────────────────────────────────────────────────┐
        │ PGPASSWORD='bJwPx-g-u9?lt!O[[EG2:Kzj[cs~' psql \               │
        │   -h production-ysh-b2b-postgres.cmxiy0wqok6l.us-east-1.\     │
        │      rds.amazonaws.com \                                      │
        │   -U medusa_user \                                            │
        │   -d postgres \                                               │
        │   -c 'CREATE DATABASE medusa_db;'                             │
        └───────────────────────────────────────────────────────────────┘

  [ ] 7. VERIFICAR OUTPUT exibe:
        ✅ "CREATE DATABASE"
        OU
        ⚠️  "already exists" (também OK!)

  [ ] 8. Fechar Session Manager (pode fechar navegador)


═══════════════════════════════════════════════════════════════════════════
  PARTE 2: AUTOMÁTICA (15 MINUTOS) - SCRIPT FAZ TUDO
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ 🤖 TASK 2: EXECUTAR SCRIPT AUTOMATIZADO                                 │
└─────────────────────────────────────────────────────────────────────────┘

  [ ] 9. Voltar ao PowerShell (este terminal)

  [ ] 10. Executar comando:
        ┌───────────────────────────────────────────────────────────────┐
        │ .\deploy-final.ps1 -SkipDatabaseCreation                      │
        └───────────────────────────────────────────────────────────────┘

  [ ] 11. AGUARDAR script completar (~15 min)
          O script vai automaticamente:

          ├─ [  ] Redeploy backend service (1 min)
          ├─ [  ] Aguardar backend 2/2 tasks RUNNING (2 min)
          ├─ [  ] Executar database migrations (3 min)
          ├─ [  ] Carregar seed data: 511 SKUs + 101 Kits (5 min)
          ├─ [  ] Health check backend /health (30s)
          ├─ [  ] Health check storefront / (30s)
          ├─ [  ] Testar Catalog API manufacturers (30s)
          ├─ [  ] Testar Catalog API panels (30s)
          ├─ [  ] Verificar Target Groups 4/4 healthy (30s)
          └─ [  ] Cleanup bastion host (1 min)

  [ ] 12. VERIFICAR mensagem final:
          ✅ "🎉 DEPLOYMENT 100% FUNCIONAL!"


═══════════════════════════════════════════════════════════════════════════
  PARTE 3: VALIDAÇÃO FINAL (2 MINUTOS)
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ ✅ TASK 3: TESTAR ENDPOINTS                                              │
└─────────────────────────────────────────────────────────────────────────┘

  [ ] 13. Testar Backend Health:
          ┌───────────────────────────────────────────────────────────────┐
          │ curl http://production-ysh-b2b-alb-1849611639.us-east-1.\    │
          │      elb.amazonaws.com/health                                 │
          └───────────────────────────────────────────────────────────────┘
          ✅ Esperado: {"status":"ok"}

  [ ] 14. Testar Storefront:
          ┌───────────────────────────────────────────────────────────────┐
          │ curl http://production-ysh-b2b-alb-1849611639.us-east-1.\    │
          │      elb.amazonaws.com/                                       │
          └───────────────────────────────────────────────────────────────┘
          ✅ Esperado: HTML da homepage

  [ ] 15. Testar Catalog API:
          ┌───────────────────────────────────────────────────────────────┐
          │ curl http://production-ysh-b2b-alb-1849611639.us-east-1.\    │
          │      elb.amazonaws.com/store/catalog/manufacturers            │
          └───────────────────────────────────────────────────────────────┘
          ✅ Esperado: JSON com 37 manufacturers

  [ ] 16. Verificar ECS Services:
          ┌───────────────────────────────────────────────────────────────┐
          │ aws ecs describe-services --cluster production-ysh-b2b-\     │
          │   cluster --services ysh-b2b-backend ysh-b2b-storefront \     │
          │   --query "services[*].[serviceName,runningCount]" \          │
          │   --output table --profile ysh-production --region us-east-1  │
          └───────────────────────────────────────────────────────────────┘
          ✅ Esperado: backend: 2/2, storefront: 2/2


═══════════════════════════════════════════════════════════════════════════
  🎉 DEPLOYMENT COMPLETO - SISTEMA 100% FUNCIONAL!
═══════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────┐
│ ✅ RESULTADO FINAL                                                       │
└─────────────────────────────────────────────────────────────────────────┘

    ✅ Backend:       2/2 tasks RUNNING + healthy
    ✅ Storefront:    2/2 tasks RUNNING + healthy
    ✅ Database:      medusa_db com migrations + seed data
    ✅ Catalog:       511 SKUs + 101 Kits + 37 Manufacturers
    ✅ Health:        Todos endpoints respondendo HTTP 200
    ✅ Target Groups: 4/4 targets healthy
    ✅ Load Balancer: Roteamento correto


┌─────────────────────────────────────────────────────────────────────────┐
│ 📝 PRÓXIMOS PASSOS (PÓS-DEPLOYMENT)                                     │
└─────────────────────────────────────────────────────────────────────────┘

  [ ] 17. Atualizar PRE_FLIGHT_CHECKLIST.md com timestamp

  [ ] 18. Configurar domínio personalizado (Route 53)

  [ ] 19. Adicionar certificado SSL (AWS ACM)

  [ ] 20. Configurar CloudWatch Alarms

  [ ] 21. Implementar Gap P0: Página comparação de preços


═══════════════════════════════════════════════════════════════════════════

📂 ARQUIVOS DE REFERÊNCIA:
   • CREATE_DATABASE_MANUAL.md    → Detalhes Task 1
   • deploy-final.ps1             → Script Task 2
   • EXECUTION_STATUS.md          → Status completo
   • DEPLOYMENT_EXECUTION_PLAN.md → Plano detalhado + rollback

═══════════════════════════════════════════════════════════════════════════

⏱️  TIMELINE:
    • Task 1 (Manual):      4 minutos   ⏸️  AGUARDANDO VOCÊ
    • Task 2 (Automática): 15 minutos   🤖 Script pronto
    • Task 3 (Validação):   2 minutos   ✅ Comandos preparados
    ─────────────────────────────────────────────────────────────
    TOTAL:                 21 minutos   → 100% FUNCIONAL! 🚀

═══════════════════════════════════════════════════════════════════════════
