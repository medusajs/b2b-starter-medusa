# ==========================================
# Docker Compose para Desenvolvimento
# Configuração otimizada para performance
# ==========================================

version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ysh-b2b-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: medusa_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ysh-b2b-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d medusa_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ysh-b2b-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ysh-b2b-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend Medusa
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: ysh-b2b-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/medusa_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-token
      COOKIE_SECRET: your-super-secret-cookie-token
    ports:
      - "9000:9000"
    volumes:
      - backend_uploads:/app/uploads
    networks:
      - ysh-b2b-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Storefront Next.js
  storefront:
    build:
      context: ./storefront
      dockerfile: Dockerfile
      target: runner
    container_name: ysh-b2b-storefront
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_MEDUSA_BACKEND_URL: http://localhost:9000
      NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: pk_test
      NEXT_PUBLIC_BASE_URL: http://localhost:8000
      NEXT_PUBLIC_DEFAULT_REGION: us
      REVALIDATE_SECRET: supersecret
    ports:
      - "8000:8000"
    networks:
      - ysh-b2b-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ysh-b2b-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - ysh-b2b-network
    depends_on:
      - backend
      - storefront
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  ysh-b2b-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
