name: Deploy to Vercel

on:
      push:
            branches: [main]
            paths: ["storefront/**"]
      pull_request:
            branches: [main]
            paths: ["storefront/**"]

env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
      build-and-test:
            name: Build and Test
            runs-on: ubuntu-latest

            steps:
                  - name: Checkout code
                    uses: actions/checkout@v4

                  - name: Setup Node.js
                    uses: actions/setup-node@v4
                    with:
                          node-version: "20"
                          cache: "npm"
                          cache-dependency-path: storefront/package-lock.json

                  - name: Install dependencies
                    working-directory: ./storefront
                    run: npm ci --legacy-peer-deps

                  - name: Create environment file
                    working-directory: ./storefront
                    run: cp .env.template .env.local

                  - name: Run build
                    working-directory: ./storefront
                    run: |
                          NODE_ENV=production \
                          NEXT_TELEMETRY_DISABLED=1 \
                          NODE_OPTIONS="--max-old-space-size=4096" \
                          npm run build

                  - name: Run type check
                    working-directory: ./storefront
                    run: npx tsc --noEmit || true

      deploy-preview:
            name: Deploy Preview
            runs-on: ubuntu-latest
            needs: build-and-test
            if: github.event_name == 'pull_request'

            steps:
                  - name: Checkout code
                    uses: actions/checkout@v4

                  - name: Setup Node.js
                    uses: actions/setup-node@v4
                    with:
                          node-version: "20"
                          cache: "npm"
                          cache-dependency-path: storefront/package-lock.json

                  - name: Install Vercel CLI
                    run: npm install --global vercel@latest

                  - name: Pull Vercel Environment Information
                    working-directory: ./storefront
                    run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

                  - name: Build Project Artifacts
                    working-directory: ./storefront
                    run: |
                          vercel build --token=${{ secrets.VERCEL_TOKEN }}
                    env:
                          NODE_ENV: production
                          NEXT_TELEMETRY_DISABLED: 1
                          NODE_OPTIONS: "--max-old-space-size=4096"

                  - name: Deploy to Vercel Preview
                    working-directory: ./storefront
                    run: |
                          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
                          echo "Preview URL: $DEPLOYMENT_URL"
                          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

                  - name: Comment Preview URL
                    uses: actions/github-script@v7
                    if: github.event_name == 'pull_request'
                    with:
                          script: |
                                github.rest.issues.createComment({
                                  issue_number: context.issue.number,
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  body: `üöÄ **Preview deployment ready!**\n\n**URL:** ${process.env.DEPLOYMENT_URL}\n\n*This preview will be automatically updated when you push changes to this PR.*`
                                })

      deploy-production:
            name: Deploy Production
            runs-on: ubuntu-latest
            needs: build-and-test
            if: github.ref == 'refs/heads/main' && github.event_name == 'push'

            steps:
                  - name: Checkout code
                    uses: actions/checkout@v4

                  - name: Setup Node.js
                    uses: actions/setup-node@v4
                    with:
                          node-version: "20"
                          cache: "npm"
                          cache-dependency-path: storefront/package-lock.json

                  - name: Install Vercel CLI
                    run: npm install --global vercel@latest

                  - name: Pull Vercel Environment Information
                    working-directory: ./storefront
                    run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

                  - name: Build Project Artifacts
                    working-directory: ./storefront
                    run: |
                          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
                    env:
                          NODE_ENV: production
                          NEXT_TELEMETRY_DISABLED: 1
                          NODE_OPTIONS: "--max-old-space-size=4096"

                  - name: Deploy to Vercel Production
                    working-directory: ./storefront
                    run: |
                          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
                          echo "Production URL: $DEPLOYMENT_URL"
                          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

                  - name: Verify deployment
                    run: |
                          sleep 30
                          if curl -f -s "${{ env.DEPLOYMENT_URL }}" > /dev/null; then
                            echo "‚úÖ Deployment is healthy"
                          else
                            echo "‚ùå Deployment health check failed"
                            exit 1
                          fi

                  - name: Deployment success notification
                    run: |
                          echo "üöÄ Production deployment completed successfully!"
                          echo "URL: ${{ env.DEPLOYMENT_URL }}"
