# ==========================================
# Containerfile (Podfile) para Backend Medusa
# Otimizado para desenvolvimento com Fedora/RHEL
# ==========================================

# Stage 1: Base Fedora com Node.js
FROM registry.fedoraproject.org/fedora:latest AS base

# Instalar Node.js e dependências do sistema
RUN dnf update -y && \
      dnf install -y \
      nodejs \
      npm \
      postgresql \
      redis \
      curl \
      wget \
      git \
      python3 \
      python3-pip \
      gcc \
      gcc-c++ \
      make \
      glibc-devel \
      && dnf clean all

# Configurar diretório de trabalho
WORKDIR /app

# Configurações de performance para Node.js
ENV NODE_ENV=development
ENV NODE_OPTIONS="--max-old-space-size=2048 --enable-source-maps"
ENV NPM_CONFIG_LOGLEVEL=warn
ENV NPM_CONFIG_PROGRESS=false

# Stage 2: Dependency installer
FROM base AS deps
COPY package*.json ./
COPY .npmrc* ./

# Cache otimizado para dependências
RUN --mount=type=cache,target=/root/.npm \
      npm ci --no-audit --no-fund && \
      npm cache clean --force

# Stage 3: Development runner
FROM base AS dev

# Criar usuário não-root para desenvolvimento
RUN useradd --system --create-home --shell /bin/bash medusa && \
      usermod -aG wheel medusa

# Copiar dependências
COPY --from=deps --chown=medusa:medusa /app/node_modules ./node_modules
COPY --chown=medusa:medusa . .

# Instalar ferramentas de desenvolvimento
RUN npm install -g \
      nodemon \
      @medusajs/cli \
      typescript \
      ts-node

# Configurar hot reload e debugging
ENV CHOKIDAR_USEPOLLING=true
ENV WATCHPACK_POLLING=true
ENV DEBUG=medusa:*

# Expor portas para desenvolvimento
EXPOSE 9000 9001 9002

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
      CMD curl -f http://localhost:9000/health || exit 1

# Configurar usuário
USER medusa

# Script de entrada para desenvolvimento
ENTRYPOINT ["sh", "-c", "npm run dev"]