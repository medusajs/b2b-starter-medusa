#!/usr/bin/env python3
"""
ü§ñ Enriquecimento de Dados com GPT OSS 20B via Ollama
===================================================

Enriquece produtos do cat√°logo com foco em:
- Fabricante, Produto, Modelo, S√©rie
- KPIs solares (pot√™ncia, efici√™ncia, gera√ß√£o)
- Pre√ßo e valor por Wp
- Certifica√ß√µes e conformidades
- Vida √∫til e garantia
- Distribuidor e origem

Usage:
    python llm_product_enricher.py
"""

import json
import requests
import time
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime

class OllamaEnricher:
    def __init__(self):
        self.base_url = "http://localhost:11434"
        self.model = "gpt-oss:20b"
        self.catalog_path = Path("medusa-catalog")
        self.output_path = Path("enriched-catalog")
        self.output_path.mkdir(exist_ok=True)
        
        # Estat√≠sticas
        self.stats = {
            "processed": 0,
            "enriched": 0,
            "errors": 0,
            "skipped": 0
        }
    
    def test_connection(self) -> bool:
        """Testa conex√£o com Ollama"""
        try:
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model,
                    "prompt": "Teste. Responda apenas: OK",
                    "stream": False
                },
                timeout=10
            )
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
            return False
    
    def create_enrichment_prompt(self, product: Dict[str, Any]) -> str:
        """Cria prompt para enriquecimento do produto"""
        
        # Extrair informa√ß√µes b√°sicas do produto
        title = product.get("title", "")
        description = product.get("description", "")
        metadata = product.get("metadata", {})
        distributor = metadata.get("distributor", "")
        
        # Tentar extrair especifica√ß√µes existentes
        system_specs = metadata.get("system_specs", {})
        neosolar_specs = metadata.get("neosolar_specs", {})
        power_kwp = system_specs.get("total_power_kwp") or neosolar_specs.get("potencia_kwp", 0)
        
        # Extrair pre√ßo se dispon√≠vel
        variants = product.get("variants", [])
        price_brl = 0
        if variants and variants[0].get("prices"):
            price_brl = variants[0]["prices"][0].get("amount", 0) / 100  # Converter de centavos
        
        prompt = f"""
Voc√™ √© um especialista em energia solar. Analise este produto e enrique√ßa os dados seguindo EXATAMENTE a estrutura JSON solicitada.

PRODUTO PARA AN√ÅLISE:
T√≠tulo: {title}
Descri√ß√£o: {description}
Distribuidor: {distributor}
Pot√™ncia atual: {power_kwp} kWp
Pre√ßo atual: R$ {price_brl:.2f}

INSTRU√á√ïES:
1. FABRICANTE: Identifique o fabricante principal dos pain√©is/equipamentos
2. PRODUTO: Categorize o tipo de produto (Kit Solar, Painel, Inversor, etc.)
3. MODELO/S√âRIE: Extraia modelo espec√≠fico e s√©rie se mencionado
4. KPIs SOLARES: Calcule m√©tricas de performance
5. PRE√áO: Analise competitividade e valor por Wp
6. CERTIFICA√á√ïES: Identifique certifica√ß√µes e conformidades
7. VIDA √öTIL: Estime durabilidade e garantia
8. DISTRIBUIDOR: Avalie reputa√ß√£o e origem

RESPONDA APENAS COM JSON V√ÅLIDO (sem markdown, sem explica√ß√µes):
{{
    "fabricante": {{
        "nome": "Nome do fabricante principal",
        "pais_origem": "Pa√≠s de origem",
        "reputacao": "Tier 1/Tier 2/Tier 3",
        "confiabilidade": "Alta/M√©dia/Baixa"
    }},
    "produto": {{
        "categoria": "Kit Solar Off-Grid/On-Grid/H√≠brido/Painel/Inversor/Bateria",
        "modelo": "Modelo espec√≠fico extra√≠do",
        "serie": "S√©rie se identificada",
        "aplicacao_principal": "Residencial/Comercial/Industrial/Rural"
    }},
    "kpis_solares": {{
        "potencia_wp": {power_kwp * 1000 if power_kwp > 0 else 'null'},
        "eficiencia_estimada": "Percentual estimado",
        "geracao_mensal_kwh": "Estimativa para regi√£o SE",
        "fator_capacidade": "Decimal entre 0-1",
        "payback_anos": "Anos estimados para ROI"
    }},
    "preco_analise": {{
        "valor_brl": {price_brl if price_brl > 0 else 'null'},
        "preco_por_wp": "R$/Wp calculado",
        "competitividade": "Excelente/Bom/Regular/Alto",
        "posicionamento": "Premium/Intermedi√°rio/Econ√¥mico"
    }},
    "certificacoes": {{
        "inmetro": "Sim/N√£o/N√£o informado",
        "iec_standards": ["IEC61215", "IEC61730"],
        "aneel": "Homologado/N√£o homologado/N√£o informado",
        "conformidades": ["ABNT", "ISO9001"],
        "status_regulatorio": "Conforme/Pendente/N√£o conforme"
    }},
    "vida_util": {{
        "garantia_produto_anos": "Anos de garantia",
        "garantia_performance_anos": "Anos garantia de performance",
        "vida_util_estimada_anos": "Vida √∫til total estimada",
        "degradacao_anual": "% de degrada√ß√£o anual",
        "confiabilidade": "Alta/M√©dia/Baixa"
    }},
    "distribuidor_info": {{
        "nome": "{distributor}",
        "categoria": "Fabricante/Distribuidor/Integrador/Marketplace",
        "reputacao_mercado": "Excelente/Boa/Regular/Baixa",
        "cobertura_brasil": "Nacional/Regional/Local",
        "suporte_tecnico": "Completo/B√°sico/Limitado"
    }},
    "score_geral": {{
        "qualidade_produto": "1-10",
        "relacao_custo_beneficio": "1-10",
        "confiabilidade_marca": "1-10",
        "suporte_pos_venda": "1-10",
        "recomendacao": "Altamente Recomendado/Recomendado/Aceito/N√£o Recomendado"
    }}
}}
"""
        return prompt.strip()
    
    def enrich_product(self, product: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Enriquece um produto espec√≠fico"""
        try:
            prompt = self.create_enrichment_prompt(product)
            
            print(f"üîÑ Enriquecendo: {product.get('title', 'Produto sem t√≠tulo')[:50]}...")
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json={
                    "model": self.model,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # Baixa temperatura para consist√™ncia
                        "top_k": 10,
                        "top_p": 0.9
                    }
                },
                timeout=60
            )
            
            if response.status_code != 200:
                print(f"‚ùå Erro HTTP: {response.status_code}")
                return None
            
            result = response.json()
            enrichment_text = result.get("response", "").strip()
            
            # Tentar fazer parse do JSON
            if enrichment_text.startswith("```json"):
                enrichment_text = enrichment_text.replace("```json", "").replace("```", "").strip()
            elif enrichment_text.startswith("```"):
                enrichment_text = enrichment_text.replace("```", "").strip()
            
            try:
                enrichment_data = json.loads(enrichment_text)
                return enrichment_data
            except json.JSONDecodeError as e:
                print(f"‚ùå Erro ao parsear JSON: {e}")
                print(f"üìÑ Resposta recebida: {enrichment_text[:200]}...")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro no enriquecimento: {e}")
            return None
    
    def load_latest_catalog(self) -> Dict[str, Any]:
        """Carrega o cat√°logo mais recente"""
        catalog_files = list(self.catalog_path.glob("complete_catalog_*.json"))
        if not catalog_files:
            raise FileNotFoundError("Nenhum arquivo de cat√°logo encontrado")
        
        latest_file = max(catalog_files, key=lambda f: f.stat().st_mtime)
        print(f"üìÅ Carregando cat√°logo: {latest_file.name}")
        
        with open(latest_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def save_enriched_product(self, original_product: Dict[str, Any], enrichment: Dict[str, Any]) -> Dict[str, Any]:
        """Combina produto original com enriquecimento"""
        enriched_product = original_product.copy()
        
        # Adicionar enriquecimento aos metadados
        if "metadata" not in enriched_product:
            enriched_product["metadata"] = {}
        
        enriched_product["metadata"]["llm_enrichment"] = {
            "enriched_at": datetime.now().isoformat(),
            "model_used": self.model,
            "version": "1.0",
            **enrichment
        }
        
        # Atualizar campos espec√≠ficos se melhorados
        try:
            # Atualizar t√≠tulo se for mais descritivo
            fabricante = enrichment.get("fabricante", {}).get("nome", "")
            produto_info = enrichment.get("produto", {})
            if fabricante and produto_info.get("modelo"):
                enhanced_title = f"{fabricante} {produto_info.get('modelo')} - {produto_info.get('categoria', '')}"
                if len(enhanced_title) > len(original_product.get("title", "")):
                    enriched_product["enhanced_title"] = enhanced_title
            
            # Adicionar tags enriquecidas
            new_tags = set(enriched_product.get("tags", []))
            
            # Tags do fabricante
            if fabricante:
                new_tags.add(f"tag_{fabricante.lower().replace(' ', '_')}")
            
            # Tags de certifica√ß√£o
            cert = enrichment.get("certificacoes", {})
            if cert.get("inmetro") == "Sim":
                new_tags.add("tag_inmetro")
            if cert.get("aneel") == "Homologado":
                new_tags.add("tag_aneel_homologado")
            
            # Tags de qualidade
            score = enrichment.get("score_geral", {})
            recomendacao = score.get("recomendacao", "")
            if "Altamente" in recomendacao:
                new_tags.add("tag_altamente_recomendado")
            elif "Recomendado" in recomendacao:
                new_tags.add("tag_recomendado")
            
            enriched_product["tags"] = list(new_tags)
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar melhorias: {e}")
        
        return enriched_product
    
    def process_catalog(self, max_products: int = 10) -> None:
        """Processa o cat√°logo completo"""
        print("üöÄ Iniciando enriquecimento com GPT OSS 20B")
        print("=" * 60)
        
        # Testar conex√£o
        if not self.test_connection():
            print("‚ùå Falha na conex√£o com Ollama. Certifique-se de que est√° rodando.")
            return
        
        print("‚úÖ Conex√£o com Ollama estabelecida")
        
        # Carregar cat√°logo
        catalog = self.load_latest_catalog()
        products = catalog.get("products", [])
        
        print(f"üì¶ Produtos encontrados: {len(products)}")
        print(f"üéØ Processando: {min(max_products, len(products))} produtos")
        print()
        
        # Processar produtos
        enriched_products = []
        
        for i, product in enumerate(products[:max_products]):
            print(f"üìã Produto {i+1}/{min(max_products, len(products))}")
            
            # Enriquecer produto
            enrichment = self.enrich_product(product)
            
            if enrichment:
                enriched_product = self.save_enriched_product(product, enrichment)
                enriched_products.append(enriched_product)
                self.stats["enriched"] += 1
                
                # Mostrar resumo do enriquecimento
                fabricante = enrichment.get("fabricante", {}).get("nome", "N/A")
                score = enrichment.get("score_geral", {}).get("recomendacao", "N/A")
                preco_wp = enrichment.get("preco_analise", {}).get("preco_por_wp", "N/A")
                
                print(f"   ‚úÖ Fabricante: {fabricante}")
                print(f"   üí∞ Pre√ßo/Wp: {preco_wp}")
                print(f"   ‚≠ê Recomenda√ß√£o: {score}")
            else:
                enriched_products.append(product)
                self.stats["errors"] += 1
                print(f"   ‚ùå Falha no enriquecimento")
            
            self.stats["processed"] += 1
            print()
            
            # Pausa entre requests
            time.sleep(2)
        
        # Salvar cat√°logo enriquecido
        enriched_catalog = catalog.copy()
        enriched_catalog["products"] = enriched_products
        enriched_catalog["metadata"]["enriched_at"] = datetime.now().isoformat()
        enriched_catalog["metadata"]["enrichment_model"] = self.model
        enriched_catalog["metadata"]["enrichment_stats"] = self.stats
        
        output_file = self.output_path / f"enriched_catalog_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.json"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(enriched_catalog, f, indent=2, ensure_ascii=False)
        
        # Relat√≥rio final
        print("üéâ ENRIQUECIMENTO CONCLU√çDO")
        print("=" * 40)
        print(f"üìä Produtos processados: {self.stats['processed']}")
        print(f"‚úÖ Enriquecidos com sucesso: {self.stats['enriched']}")
        print(f"‚ùå Erros: {self.stats['errors']}")
        print(f"üìÅ Arquivo salvo: {output_file}")
        
        if self.stats["enriched"] > 0:
            success_rate = (self.stats["enriched"] / self.stats["processed"]) * 100
            print(f"üìà Taxa de sucesso: {success_rate:.1f}%")
        
        print("\nüí° Pr√≥ximos passos:")
        print("   ‚Ä¢ Revisar produtos enriquecidos")
        print("   ‚Ä¢ Validar qualidade dos dados")
        print("   ‚Ä¢ Integrar ao cat√°logo principal")
        print("   ‚Ä¢ Expandir para todos os produtos")

def main():
    enricher = OllamaEnricher()
    
    try:
        # Processar 5 produtos inicialmente para teste
        enricher.process_catalog(max_products=5)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Processo interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante o processamento: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()