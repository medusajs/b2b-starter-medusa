# ==========================================
# CloudFormation Template - AWS FREE TIER OPTIMIZED
# Medusa.js 2.10.3 B2B E-commerce
# ==========================================
# 
# RECURSOS FREE TIER UTILIZADOS:
# - RDS db.t3.micro (750h/mês) ou db.t4g.micro (ARM)
# - ElastiCache cache.t4g.micro (750h/mês)
# - ECS Fargate: 20GB storage + 10GB transfer/mês
# - ALB: 750h/mês + 15GB processado
# - S3: 5GB Standard + 20k GET + 2k PUT
# - CloudWatch: 10 métricas + 10 alarmes + 5GB logs
# ==========================================

AWSTemplateFormatVersion: "2010-09-09"
Description: "YSH B2B - Medusa 2.10.3 - FREE TIER OPTIMIZED"

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment

  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC

  DBMasterUsername:
    Type: String
    Default: medusa_user
    NoEcho: true
    Description: Master username for RDS

  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Master password for RDS (min 8 chars)

  MedusaJWTSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: JWT secret for Medusa (min 32 chars)

  MedusaCookieSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: Cookie secret for Medusa (min 32 chars)

Resources:
  # ==========================================
  # VPC & NETWORKING - FREE TIER
  # ==========================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-vpc
        - Key: Environment
          Value: !Ref Environment
        - Key: FreeTier
          Value: "true"

  # Public Subnets (2 AZs para alta disponibilidade)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-public-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-public-2

  # Private Subnets (RDS e ElastiCache)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-private-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-private-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-public-rt

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # ==========================================
  # RDS POSTGRESQL - FREE TIER (db.t3.micro)
  # 750 horas/mês | 20GB SSD | Backup 7 dias
  # ==========================================

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${Environment} YSH DB Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-db-subnet-group
        - Key: FreeTier
          Value: "true"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ysh-db-sg
      GroupDescription: Security group for PostgreSQL RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow ECS tasks to access PostgreSQL
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-db-sg
        - Key: FreeTier
          Value: "true"

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub ${Environment}-ysh-postgres
      # FREE TIER: db.t3.micro (1 vCPU, 1GB RAM)
      # Alternativa: db.t4g.micro (ARM Graviton2 - mais eficiente)
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "15.7"
      # FREE TIER: 20GB SSD incluído
      AllocatedStorage: 20
      StorageType: gp3
      Iops: 3000
      StorageEncrypted: true
      DBName: medusa_db
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      # FREE TIER: 7 dias de backup automático incluído
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "03:00-04:00"
      PreferredMaintenanceWindow: "sun:04:00-sun:05:00"
      # Desabilitar para free tier (custo adicional)
      DeletionProtection: false
      EnablePerformanceInsights: false
      MultiAZ: false
      # Otimizações Medusa 2.10.3
      DBParameterGroupName: !Ref DBParameterGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-postgres
        - Key: FreeTier
          Value: "true"
        - Key: MedusaVersion
          Value: "2.10.3"

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Optimized PostgreSQL 15 for Medusa 2.10.3
      Family: postgres15
      Parameters:
        # Otimizações para Medusa.js
        max_connections: "100"
        shared_buffers: "{DBInstanceClassMemory/4096}MB"
        effective_cache_size: "{DBInstanceClassMemory*3/4096}MB"
        work_mem: "4MB"
        maintenance_work_mem: "64MB"
        # Query optimizer
        random_page_cost: "1.1"
        effective_io_concurrency: "200"
        # Logging otimizado
        log_statement: "ddl"
        log_min_duration_statement: "1000"
        # Autovacuum agressivo (free tier = poucos recursos)
        autovacuum_max_workers: "2"
        autovacuum_vacuum_cost_limit: "400"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-postgres-params

  # ==========================================
  # ELASTICACHE REDIS - FREE TIER (cache.t4g.micro)
  # 750 horas/mês | 555MB RAM
  # ==========================================

  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: !Sub ${Environment} YSH Redis Subnet Group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      CacheSubnetGroupName: !Sub ${Environment}-ysh-redis-subnet-group
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-redis-subnet-group
        - Key: FreeTier
          Value: "true"

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ysh-redis-sg
      GroupDescription: Security group for Redis ElastiCache
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref ECSSecurityGroup
          Description: Allow ECS tasks to access Redis
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-redis-sg
        - Key: FreeTier
          Value: "true"

  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: !Sub ${Environment}-ysh-redis
      # FREE TIER: cache.t4g.micro (2 vCPU ARM, 555MB RAM)
      # Alternativa: cache.t3.micro (mais compatível mas menos eficiente)
      CacheNodeType: cache.t4g.micro
      Engine: redis
      EngineVersion: "7.1"
      NumCacheNodes: 1
      Port: 6379
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      PreferredMaintenanceWindow: "sun:05:00-sun:06:00"
      # Otimizações Medusa 2.10.3
      CacheParameterGroupName: !Ref RedisParameterGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-redis
        - Key: FreeTier
          Value: "true"
        - Key: MedusaVersion
          Value: "2.10.3"

  RedisParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      Description: Optimized Redis 7.1 for Medusa 2.10.3
      CacheParameterGroupFamily: redis7
      Properties:
        # Otimizações para free tier (555MB RAM)
        maxmemory-policy: allkeys-lru
        # Cache de sessões Medusa
        timeout: "300"
        # Persistence leve
        appendonly: "yes"
        appendfsync: "everysec"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-redis-params

  # ==========================================
  # S3 BUCKET - FREE TIER
  # 5GB Standard | 20k GET | 2k PUT/mês
  # ==========================================

  MediaBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub ${Environment}-ysh-media-${AWS::AccountId}
      # FREE TIER: S3 Standard (5GB incluído)
      # Usar Intelligent-Tiering após 30 dias para otimizar
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-media
        - Key: FreeTier
          Value: "true"

  MediaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Sid: AllowECSTaskRole
            Effect: Allow
            Principal:
              AWS: !GetAtt ECSTaskExecutionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub ${MediaBucket.Arn}/*
          - Sid: AllowCloudFrontOAI
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${MediaBucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/*

  # ==========================================
  # ECS FARGATE - FREE TIER
  # 20GB storage + 10GB transfer/mês
  # ==========================================

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Environment}-ysh-cluster
      # FREE TIER: Usar Fargate Spot (até 70% mais barato)
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 3
          Base: 0
        - CapacityProvider: FARGATE
          Weight: 1
          Base: 1
      ClusterSettings:
        - Name: containerInsights
          Value: disabled # Desabilitar para free tier
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-cluster
        - Key: FreeTier
          Value: "true"

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ysh-ecs-sg
      GroupDescription: Security group for ECS Fargate tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Storefront from ALB
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Backend from ALB
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-ecs-sg
        - Key: FreeTier
          Value: "true"

  # IAM Roles for ECS
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-ysh-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref MedusaSecretsManager
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-ecs-execution-role

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Environment}-ysh-ecs-task-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt MediaBucket.Arn
                  - !Sub ${MediaBucket.Arn}/*
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-ecs-task-role

  # ==========================================
  # SECRETS MANAGER
  # ==========================================

  MedusaSecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Environment}/ysh/medusa
      Description: Medusa 2.10.3 secrets (JWT, Cookie, DB)
      SecretString: !Sub |
        {
          "DATABASE_URL": "postgres://${DBMasterUsername}:${DBMasterPassword}@${DBInstance.Endpoint.Address}:5432/medusa_db",
          "REDIS_URL": "redis://${RedisCluster.RedisEndpoint.Address}:6379",
          "JWT_SECRET": "${MedusaJWTSecret}",
          "COOKIE_SECRET": "${MedusaCookieSecret}",
          "S3_BUCKET": "${MediaBucket}",
          "AWS_REGION": "${AWS::Region}"
        }
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-secrets
        - Key: FreeTier
          Value: "true"

  # ==========================================
  # APPLICATION LOAD BALANCER - FREE TIER
  # 750 horas/mês | 15GB processado
  # ==========================================

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-ysh-alb-sg
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS from internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-alb-sg
        - Key: FreeTier
          Value: "true"

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Environment}-ysh-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-alb
        - Key: FreeTier
          Value: "true"

  # Target Groups
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-ysh-backend-tg
      Port: 9000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-backend-tg

  StorefrontTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${Environment}-ysh-storefront-tg
      Port: 8000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200,301,302"
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-storefront-tg

  # ALB Listener HTTP
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StorefrontTargetGroup

  # ALB Listener Rules
  ALBListenerRuleBackend:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTP
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - /admin*
            - /store*
            - /api*
            - /health*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # ==========================================
  # CLOUDWATCH LOGS - FREE TIER
  # 5GB ingestão + 5GB armazenamento/mês
  # ==========================================

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${Environment}-ysh-backend
      RetentionInDays: 7 # FREE TIER: mínimo para depuração
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-backend-logs
        - Key: FreeTier
          Value: "true"

  StorefrontLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${Environment}-ysh-storefront
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-ysh-storefront-logs
        - Key: FreeTier
          Value: "true"

# ==========================================
# OUTPUTS
# ==========================================

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${Environment}-ysh-vpc-id

  DatabaseEndpoint:
    Description: RDS PostgreSQL endpoint
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub ${Environment}-ysh-db-endpoint

  RedisEndpoint:
    Description: ElastiCache Redis endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub ${Environment}-ysh-redis-endpoint

  LoadBalancerDNS:
    Description: Application Load Balancer DNS
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${Environment}-ysh-alb-dns

  MediaBucketName:
    Description: S3 bucket for media files
    Value: !Ref MediaBucket
    Export:
      Name: !Sub ${Environment}-ysh-media-bucket

  ECSClusterName:
    Description: ECS Cluster name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${Environment}-ysh-cluster-name

  SecretsManagerARN:
    Description: Secrets Manager ARN
    Value: !Ref MedusaSecretsManager
    Export:
      Name: !Sub ${Environment}-ysh-secrets-arn

  # FREE TIER SUMMARY
  FreeTierResources:
    Description: AWS Free Tier resources deployed
    Value: !Sub |
      RDS: db.t3.micro (750h/mês)
      ElastiCache: cache.t4g.micro (750h/mês)
      ALB: Application Load Balancer (750h/mês)
      S3: Standard storage (5GB)
      CloudWatch: Logs (5GB)
      ECS Fargate: 20GB storage + 10GB transfer
