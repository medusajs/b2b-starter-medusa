[
    {
        "id": "ci_cd_flow",
        "type": "tab",
        "label": "CI/CD Pipeline",
        "disabled": false,
        "info": "Automação de testes E2E, build, e deploy"
    },
    {
        "id": "visual_regression_flow",
        "type": "tab",
        "label": "Visual Regression",
        "disabled": false,
        "info": "Storybook + Chromatic snapshots"
    },
    {
        "id": "contract_testing_flow",
        "type": "tab",
        "label": "Contract Testing",
        "disabled": false,
        "info": "Pact consumer/provider verification"
    },
    {
        "id": "monitoring_flow",
        "type": "tab",
        "label": "Monitoring & Alerts",
        "disabled": false,
        "info": "Dashboard de métricas e notificações"
    },
    {
        "id": "ci_trigger",
        "type": "http in",
        "z": "ci_cd_flow",
        "name": "CI/CD Trigger",
        "url": "/trigger/ci",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [["parse_payload"]]
    },
    {
        "id": "parse_payload",
        "type": "function",
        "z": "ci_cd_flow",
        "name": "Parse GitHub Webhook",
        "func": "const payload = msg.payload;\n\nmsg.github = {\n    event: msg.req.headers['x-github-event'],\n    ref: payload.ref,\n    branch: payload.ref ? payload.ref.split('/').pop() : null,\n    commit: payload.after || payload.pull_request?.head?.sha,\n    author: payload.sender?.login,\n    repo: payload.repository?.full_name,\n    pr_number: payload.pull_request?.number,\n    pr_title: payload.pull_request?.title\n};\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`${msg.github.event} on ${msg.github.branch}`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 80,
        "wires": [["check_should_run"]]
    },
    {
        "id": "check_should_run",
        "type": "switch",
        "z": "ci_cd_flow",
        "name": "Should Run Tests?",
        "property": "github.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "pull_request",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "push",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 80,
        "wires": [["run_e2e_tests"], ["run_e2e_tests"]]
    },
    {
        "id": "run_e2e_tests",
        "type": "exec",
        "z": "ci_cd_flow",
        "command": "cd /workspace/storefront && npm run test:e2e -- --reporter=json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Run E2E Tests (71)",
        "x": 780,
        "y": 80,
        "wires": [["parse_test_results"], ["test_failed"], ["test_failed"]]
    },
    {
        "id": "parse_test_results",
        "type": "json",
        "z": "ci_cd_flow",
        "name": "Parse Results",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1000,
        "y": 80,
        "wires": [["format_test_report"]]
    },
    {
        "id": "format_test_report",
        "type": "function",
        "z": "ci_cd_flow",
        "name": "Format Report",
        "func": "const results = msg.payload;\n\nmsg.report = {\n    total: results.stats.tests,\n    passed: results.stats.passes,\n    failed: results.stats.failures,\n    skipped: results.stats.pending,\n    duration: results.stats.duration,\n    success: results.stats.failures === 0\n};\n\nmsg.statusIcon = msg.report.success ? '✅' : '❌';\nmsg.statusText = msg.report.success ? 'PASSED' : 'FAILED';\n\nnode.status({\n    fill: msg.report.success ? \"green\" : \"red\",\n    shape: \"dot\",\n    text: `${msg.report.passed}/${msg.report.total} passed`\n});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 80,
        "wires": [["send_github_status", "send_notification"]]
    },
    {
        "id": "test_failed",
        "type": "function",
        "z": "ci_cd_flow",
        "name": "Handle Failure",
        "func": "msg.report = {\n    success: false,\n    error: msg.payload\n};\n\nmsg.statusIcon = '❌';\nmsg.statusText = 'FAILED';\n\nnode.status({fill:\"red\",shape:\"dot\",text:\"Tests failed\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 140,
        "wires": [["send_github_status", "send_notification"]]
    },
    {
        "id": "send_github_status",
        "type": "http request",
        "z": "ci_cd_flow",
        "name": "Update GitHub Status",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "sendsPayload": true,
        "x": 1440,
        "y": 80,
        "wires": [[]]
    },
    {
        "id": "send_notification",
        "type": "mqtt out",
        "z": "ci_cd_flow",
        "name": "Publish to MQTT",
        "topic": "ysh/ci/test-results",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 1440,
        "y": 140,
        "wires": []
    },
    {
        "id": "http_response",
        "type": "http response",
        "z": "ci_cd_flow",
        "name": "Response",
        "statusCode": "200",
        "headers": {},
        "x": 1420,
        "y": 40,
        "wires": []
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Local MQTT",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
